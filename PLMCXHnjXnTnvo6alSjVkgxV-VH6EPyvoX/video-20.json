{
  "kind": "youtube#videoListResponse",
  "etag": "Z8LKgyW-3xgMX_pFEPNDDBJyH0Y",
  "items": [
    {
      "kind": "youtube#video",
      "etag": "8sS5zGhI3AZnl0riORSj75iQA0k",
      "id": "rJHTK2TfZ1I",
      "snippet": {
        "publishedAt": "2018-06-01T13:51:22Z",
        "channelId": "UCRPMAqdtSgd0Ipeef7iFsKw",
        "title": "What's an Event Driven System?",
        "description": "Event Driven Systems pass and persist events. They have evolved from the publisher subscriber model, and the design has some advantages. Events are immutable and can be replayed to allow the systems to take snapshots of its behaviour. This allows services to 'self heal' as explained in the video.\n\nA lot of transaction issues are alleviated once idempotency and retrial logic is added to a system. The system can retry messages an infinite number of times to the recipient till there is a message acceptance and acknowledgement from the receiver.\n\nEvent driven systems are closely related to event sources and CQRS. Greg Young and Martin Fowler have been talking about these systems for a while. Events are persisted in something like a message queue, and hence the responsibility to retrial and persistence is moved to it. \n\nThese abstractions enable the programmer to focus on the business logic of a system and add subscribers to events with minimum coupling with other services. Decoupling the system is one of the advantages of event driven systems.\n\nOne major disadvantage of this system is that it is difficult to reason about the flow of a request. Services can independently register for an event and consume it without the publisher being aware of it.\n\nWe talk about different applications using an event driven architecture such as Git and Gaming Systems. We then discuss the advantages and disadvantages of such an architecture (Event Sourcing).\n\nCode: \nhttps://github.com/coding-parrot/Low-Level-Design/tree/master/distributed-event-bus\n\nSystem Design video course: \nhttps://get.interviewready.io/courses/system-design-interview-prep\n\nReferences:\nMartin Fowler: https://www.youtube.com/watch?v=STKCRSUsyP0\nMartin Fowler Blog: https://martinfowler.com/articles/201701-event-driven.html\nWikipedia: https://en.wikipedia.org/wiki/Event-driven_architecture\nChris Richardson: http://microservices.io/patterns/data/event-driven-architecture.html (I will be talking about this soon! )\n\nYou can find me at:\nhttps://www.facebook.com/gkcs0/\nhttps://www.quora.com/profile/Gaurav-Sen-6\nhttps://www.linkedin.com/in/gaurav-sen-56b6a941/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rJHTK2TfZ1I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rJHTK2TfZ1I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rJHTK2TfZ1I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rJHTK2TfZ1I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rJHTK2TfZ1I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Gaurav Sen",
        "tags": [
          "system design",
          "event handling",
          "event passing",
          "event sourcing",
          "event driven architecture",
          "event driven system",
          "event construction",
          "message passing",
          "publisher subscriber",
          "pub sub",
          "design system",
          "software architecture",
          "learn system design",
          "message queue",
          "immutable",
          "system design interview",
          "scalability",
          "reliability",
          "availability",
          "software interview",
          "server architecture",
          "gaurav sen",
          "gkcs"
        ],
        "categoryId": "27",
        "liveBroadcastContent": "none",
        "defaultLanguage": "en",
        "localized": {
          "title": "What's an Event Driven System?",
          "description": "Event Driven Systems pass and persist events. They have evolved from the publisher subscriber model, and the design has some advantages. Events are immutable and can be replayed to allow the systems to take snapshots of its behaviour. This allows services to 'self heal' as explained in the video.\n\nA lot of transaction issues are alleviated once idempotency and retrial logic is added to a system. The system can retry messages an infinite number of times to the recipient till there is a message acceptance and acknowledgement from the receiver.\n\nEvent driven systems are closely related to event sources and CQRS. Greg Young and Martin Fowler have been talking about these systems for a while. Events are persisted in something like a message queue, and hence the responsibility to retrial and persistence is moved to it. \n\nThese abstractions enable the programmer to focus on the business logic of a system and add subscribers to events with minimum coupling with other services. Decoupling the system is one of the advantages of event driven systems.\n\nOne major disadvantage of this system is that it is difficult to reason about the flow of a request. Services can independently register for an event and consume it without the publisher being aware of it.\n\nWe talk about different applications using an event driven architecture such as Git and Gaming Systems. We then discuss the advantages and disadvantages of such an architecture (Event Sourcing).\n\nCode: \nhttps://github.com/coding-parrot/Low-Level-Design/tree/master/distributed-event-bus\n\nSystem Design video course: \nhttps://get.interviewready.io/courses/system-design-interview-prep\n\nReferences:\nMartin Fowler: https://www.youtube.com/watch?v=STKCRSUsyP0\nMartin Fowler Blog: https://martinfowler.com/articles/201701-event-driven.html\nWikipedia: https://en.wikipedia.org/wiki/Event-driven_architecture\nChris Richardson: http://microservices.io/patterns/data/event-driven-architecture.html (I will be talking about this soon! )\n\nYou can find me at:\nhttps://www.facebook.com/gkcs0/\nhttps://www.quora.com/profile/Gaurav-Sen-6\nhttps://www.linkedin.com/in/gaurav-sen-56b6a941/"
        },
        "defaultAudioLanguage": "en"
      },
      "contentDetails": {
        "duration": "PT14M59S",
        "dimension": "2d",
        "definition": "hd",
        "caption": "false",
        "licensedContent": true,
        "contentRating": {},
        "projection": "rectangular"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 1,
    "resultsPerPage": 1
  }
}